////////////////////////////////////////////////////////////////////////////
//	マップの処理 (redrocketField.h)
//	Author : TAKUMI UENO
////////////////////////////////////////////////////////////////////////////

//--------------------------------------------------------------------------
//	インクルードファイル
//--------------------------------------------------------------------------
#include "main.h"
#include "BGM.h"

//-----------------------------------------------------------------------
// 構造体宣言
//--------------------------------------------------------------------------
BGM bgm;

////////////////////////////////////////////////////////////////////////////
// 変数名	: initBGM
// 返り値	: 
// 説明		: BGMの初期化
////////////////////////////////////////////////////////////////////////////
void initBGM ( void )
{
	//変数宣言
	int loop;
	char *BGM[TITLENUM] =		//BGMタイトル格納
	{
		"sandstorm.wav",								//0
		"カット.wav",									//1
		"rocket.wav",									//2
		"みずみずしい音.wav",							//3
		"野獣先輩「やりますねぇ！」.wav",				//4
		"シュ.wav",										//5
		"いきますよ〜、いきますよ〜イクイク.wav",		//6
		"bigyajyu.wav",									//7
		"宝塚「悔い改めて」.wav",						//8
		"doratabgm.wav",								//9
		"ひで「あああああ熱い！アーツゥイアーツゥイ！あーっ！」.wav",	//10
	};

	//-------------------------------
	// 構造体にBGMハンドルを格納
	//-------------------------------
	for( loop = 0; loop < TITLENUM; loop++ )
	{
		bgm.BGMHandle[loop] = OPENWAVE( BGM[loop]);
		if( bgm.BGMHandle[loop] == 0 && loop != 2 )
		{
			printf("Wave%dファイル再生失敗",loop);
			getchar();
		}
	}
}


////////////////////////////////////////////////////////////////////////////
// 変数名	: naraseBGM
// 返り値	: 
// 説明		: 鳴らせBGM!
////////////////////////////////////////////////////////////////////////////
void naraseBGM ( int BGMTitle , int loop )
{
	PLAYWAVE( bgm.BGMHandle[BGMTitle], loop );
}

////////////////////////////////////////////////////////////////////////////
// 変数名	: stopBGM
// 返り値	: 
// 説明		: BGM停止
////////////////////////////////////////////////////////////////////////////
void stopBGM ( int BGMTitle )
{
	STOPWAVE( bgm.BGMHandle[BGMTitle]);
}

////////////////////////////////////////////////////////////////////////////
// 変数名	: fadeBGM
// 返り値	: 
// 説明		: BGMのフェード淫
////////////////////////////////////////////////////////////////////////////
void fadeBGM ( int BGMTitle, int vol )
{
	SETWAVEVOL(BGMTitle, vol);
}

////////////////////////////////////////////////////////////////////////////
// 変数名	: closeBGM
// 返り値	: 
// 説明		: BGMクローズ
////////////////////////////////////////////////////////////////////////////
void closeBGM ( void )
{
	//関数宣言
	int loop;

	//お片付け
	for( loop = 0; loop < TITLENUM; loop++ )
	{
		CLOSEWAVE(bgm.BGMHandle[loop]);
	}
}